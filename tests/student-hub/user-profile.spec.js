const { test, expect } = require('@playwright/test')
const { getRandomNumber, getRandomCharacters } = require('../../common/common-functions')
const { CompleteLogin, Input } = require("../../common/common-classes")
const data = require("../../common/common-details.json")

const csv = "./resources/blank.xlsx"
const docMoreThan2MB = "./resources/numbercoloring.docx"
const doc = "./resources/blank.docx"

// go to the student hub homepage and login
test.beforeEach(async ({ page }) => {
    await page.goto(data.studentHubUrl)
    await page.waitForSelector("div.viewport--normal a.logo")
    const login = new CompleteLogin(page)
    await login.studentHubLogin()
    await page.hover("//button[@class='toggle-trigger']//span[contains(@class, 'icon--profile')]")
    await Promise.all([
        page.waitForNavigation(),
        page.locator('text=My Profile').nth(1).click()
    ])
})

// tests on the student hub user profile
test.describe("user profile tests", async () => {
    // tests to perform on "Personal Details" section
    // FIXME: find a way to get rid of the waitfortimeout and still make sure that it waits that the name on welcome message on top has changed
    test("personal details section", async ({ page }) => {
        await page.locator("//h3[contains(@class, 'field-set__label') and text()='Personal Details']").waitFor()
        const personal = page.locator("//h3[contains(@class, 'field-set__label') and text()='Personal Details']")
        const checkVisible = await personal.isVisible()
        test.skip(!checkVisible, "skip test when no personal details section")
        const form = personal.locator("//following-sibling::form")
        let currentFirstName = await form.locator("//label[contains(@class, input-label) and text()='First Name']/following-sibling::div").innerText()
        let currentLastName = await form.locator("//label[contains(@class, input-label) and text()='Last Name']/following-sibling::div").innerText()
        console.log(`current name: ${currentFirstName} ${currentLastName}`)
        await personal.locator("//following-sibling::button[@class='field-set__trigger']").click()
        let randomFirstName = getRandomCharacters(6)
        await form.locator("//input[@name='givenName']").fill(`Prosple_${randomFirstName}`)
        let randomLastName = getRandomCharacters(6)
        await form.locator("//input[@name='familyName']").fill(`Test_${randomLastName}`)
        await Promise.all([
            page.waitForTimeout(3000),
            form.locator("//button[text()='Submit']").click()
        ])
        await page.waitForSelector("//li[@data-testid='message-item' and p/text()='Form was submitted successfully.']")
        let newFirstName = await form.locator("//label[contains(@class, input-label) and text()='First Name']/following-sibling::div").innerText()
        let newLastName = await form.locator("//label[contains(@class, input-label) and text()='Last Name']/following-sibling::div").innerText()
        console.log(`new name: ${newFirstName} ${newLastName}`)
        expect.soft(newFirstName).toEqual(`Prosple_${randomFirstName}`)
        expect.soft(newLastName).toEqual(`Test_${randomLastName}`)
        const welcomeName = await page.locator(`//div[contains(@class, 'region--masthead')]//h1`).innerText()
        const profileName = await page.locator("div.auth-menu button.toggle-trigger a").innerText()
        expect.soft(welcomeName).toEqual(`Prosple_${randomFirstName}`)
        expect(profileName).toEqual(`Prosple_${randomFirstName}`)
    })

    // tests to perform on "Qualifications" section
    // FIXME: find a way to get rid of the waitfortimeout
    test.only("qualifications section", async ({ page }) => {
        const input = new Input(page)
        await page.locator("//h3[contains(@class, 'field-set__label') and text()='Personal Details']").waitFor()
        const qualifications = page.locator("//h3[contains(@class, 'field-set__label') and text()='Qualifications']")
        const checkVisible = await qualifications.isVisible()
        test.skip(!checkVisible, "skip test when no qualifications section")
        await page.locator("span:has-text('Loading')").last().waitFor({ state: 'detached' })
        const form = qualifications.locator("//following-sibling::div//form")
        const remove = form.locator("button.button--remove")
        const removeCount = await remove.count()
        for (let i = 0; i < removeCount; i++) {
            await remove.nth(0).click()
        }
        await qualifications.locator("//following-sibling::button[text()='Add a qualification']").click()
        let random = getRandomCharacters(6)
        let institution = `Adamson University_${random}`
        await form.locator("input[name=institution]").fill(institution)
        await input.randomSelect("//select[@name='country.0']", false)
        await form.locator("//label[contains(@class, 'input-label') and text()='Study Field']/following-sibling::*/button[text()='Add']").click()
        await input.randomSelect("//select[@name='studyField.0.0']", false)
        await input.randomSelect("//select[@name='degreeType.0']", false)
        await form.locator("input[name=courseName]").fill("")
        await form.locator("label:has-text('Qualification Name')").click()
        await expect(page.locator("//div[contains(@class, 'field--error') and text()='Name is required.']")).toBeVisible()
        await form.locator("input[name=courseName]").fill(`BS Computer Science_${random}`)
        let randomYear = getRandomNumber(2022, 2032)
        await form.locator("input[name=graduationYear]").fill(randomYear.toString())
        let randomLength = getRandomNumber(1, 10)
        await form.locator("input[name=courseLength]").fill(randomLength.toString())
        await input.randomSelect("//select[@name='grade.0']", false)
        await Promise.all([
            page.waitForTimeout(3000),
            form.locator("//button[text()='Submit']").click()
        ])
        await form.locator("div.field-set-view").waitFor()
        const name = await form.locator("div.name-tag__tags").innerText()
        const course = await form.locator("div.field-set-view h6").innerText()
        expect.soft(name).toEqual(institution.toUpperCase())
        expect(course).toEqual(`BS Computer Science_${random}`)
        await form.locator("button.button.button--remove").click()
    })

    // tests to perform on "More Information About You" section
    // FIXME: checkbox on "SEND ME INFORMATION ON RELEVANT CAREER & EDUCATION OPPORTUNITIES." is not working. commented out for now.
    test("more information about you section", async ({ page }) => {
        const input = new Input(page)
        await page.locator("//h3[contains(@class, 'field-set__label') and text()='Personal Details']").waitFor()
        const moreInfo = page.locator("//h3[contains(@class, 'field-set__label') and text()='More Information About You']")
        const checkVisible = await moreInfo.isVisible()
        test.skip(!checkVisible, "skip test when no more information about you section")
        const form = moreInfo.locator("//following-sibling::form")
        await moreInfo.locator("//following-sibling::button[@class='field-set__trigger']").click()
        await page.locator("span:has-text('Loading')").last().waitFor({ state: 'detached' })
        await expect.soft(form.locator("button.button:has-text('Submit')")).toBeVisible()
        const mobile = "09" + getRandomNumber(1, 999999999).toString().padStart(9, "0")
        await form.locator("input[name=mobile]").fill(mobile)
        const nationality = await input.randomSelect("//select[@name='nationality.0']", false)
        const country = await input.randomSelect("//select[@name='countryOfResidence.0']", false)
        const workRight = await input.randomSelect("//select[@name='workRights.0']", false)
        const gender = await input.randomSelect("//select[@name='gender.0']", false)
        // const checked = await form.locator("input[name=opportunityAlerts]").getAttribute("class")
        // console.log(checked)
        // await form.locator("//input[@name='opportunityAlerts']").click()
        const remove = form.locator("button.button:has-text('Remove')")
        const removeCount = await remove.count()
        for (let i = 0; i < removeCount; i++) {
            await remove.nth(0).click()
        }
        await form.locator("button.button:has-text('Add')").click()
        const language = await input.randomSelect("//select[@name='spokenLanguages.0.0']", false)
        const removeFile = await page.locator("a.button:has-text('Remove')").isVisible()
        if (removeFile) await page.locator("a.button:has-text('Remove')").click()
        await form.locator("input[name=cv]").setInputFiles(docMoreThan2MB)
        await form.locator("//button[text()='Submit']").click()
        await expect(page.locator("//div[contains(@class, 'field--error') and text()='File size exeeds 2MB.']")).toBeVisible()
        await form.locator("input[name=cv]").setInputFiles(csv)
        await form.locator("//button[text()='Submit']").click()
        await expect(page.locator("//div[contains(@class, 'field--error') and text()='File type not allowed.']")).toBeVisible()
        await form.locator("input[name=cv]").setInputFiles(doc)
        await form.locator("//button[text()='Submit']").click()
        await page.waitForSelector("//li[@data-testid='message-item' and p/text()='Form was submitted successfully.']")
        const savedMobile = await form.locator("//label[contains(@class, input-label) and text()='Mobile']/following-sibling::div").innerText()
        const savedNationality = await form.locator("//label[contains(@class, input-label) and text()='Nationality']/following-sibling::div//li[@class='list__item']").innerText()
        const savedCountry = await form.locator("//label[contains(@class, input-label) and text()='Country of Residence']/following-sibling::div//li[@class='list__item']").innerText()
        const savedWorkRight = await form.locator("//label[contains(@class, input-label) and text()='Work Rights']/following-sibling::div//li[@class='list__item']").innerText()
        const savedGender = await form.locator("//label[contains(@class, input-label) and text()='Gender']/following-sibling::div//li[@class='list__item']").innerText()
        const savedLanguages = await form.locator("//label[contains(@class, input-label) and text()='Spoken Languages']/following-sibling::div//li[@class='list__item']").innerText()
        expect.soft(savedMobile).toEqual(mobile)
        expect.soft(savedNationality).toEqual(nationality)
        expect.soft(savedCountry).toEqual(country)
        expect.soft(savedWorkRight).toEqual(workRight)
        expect.soft(savedGender).toEqual(gender)
        expect(savedLanguages).toEqual(language)
    })

    // tests to perform on "Career Preferences" section
    test("career preferences section", async ({ page }) => {
        const input = new Input(page)
        await page.locator("//h3[contains(@class, 'field-set__label') and text()='Personal Details']").waitFor()
        const career = page.locator("//h3[contains(@class, 'field-set__label') and text()='Career Preferences']")
        const checkVisible = await career.isVisible()
        test.skip(!checkVisible, "skip test when no career preferences section")
        const form = career.locator("//following-sibling::div/form")
        await career.locator("//following-sibling::button[@class='field-set__trigger']").click()
        await page.locator("span:has-text('Loading')").last().waitFor({ state: 'detached' })
        await expect.soft(form.locator("button.button:has-text('Submit')")).toBeVisible()
        const remove = form.locator("button.button:has-text('Remove')")
        const removeCount = await remove.count()
        for (let i = 0; i < removeCount; i++) {
            await remove.nth(0).click()
        }
        await form.locator("//label[contains(@class, 'input-label') and text()='Industries I Want to Work In']/following-sibling::*/button[text()='Add']").click()
        const chosenSector = await input.randomSelect("//select[@name='sectorInterests.0.0']", false)
        await form.locator("//label[contains(@class, 'input-label') and text()='Locations I Want to Work In']/following-sibling::*/button[text()='Add']").click()
        const chosenLocation = await input.randomSelect("//select[@name='workLocationPreference.0.0']", false)
        await form.locator("//button[text()='Submit']").click()
        await page.waitForSelector("//li[@data-testid='message-item' and p/text()='Form was submitted successfully.']")
        let sector = await form.locator("//label[contains(@class, input-label) and text()='Industries I Want to Work In']/following-sibling::div//li[@class='list__item']").innerText()
        let location = await form.locator("//label[contains(@class, input-label) and text()='Locations I Want to Work In']/following-sibling::div//li[@class='list__item']").innerText()
        expect.soft(sector).toEqual(chosenSector)
        expect(location).toEqual(chosenLocation)
    })

    // tests to perform on "About Your High School" section
    // TODO: add test cases for graduation year when user put below 1900 or above 9999
    test("about your high school section", async ({ page }) => {
        const input = new Input(page)
        await page.locator("//h3[contains(@class, 'field-set__label') and text()='Personal Details']").waitFor()
        const about = page.locator("//h3[contains(@class, 'field-set__label') and text()='About Your High School']")
        const checkVisible = await about.isVisible()
        test.skip(!checkVisible, "skip test when no career preferences section")
        const form = about.locator("//following-sibling::form")
        await about.locator("//following-sibling::button[@class='field-set__trigger']").click()
        await page.locator("span:has-text('Loading')").last().waitFor({ state: 'detached' })
        await expect.soft(form.locator("button.button:has-text('Submit')")).toBeVisible()
        // await form.locator("input[name=highschoolGraduationYear]").fill("10000")
        // await form.locator("//button[text()='Submit']").click()
        // await expect.soft(form.locator("//*[text()='Value must be less than or equal to 9999.']")).toBeVisible()
        // await form.locator("input[name=highschoolGraduationYear]").fill("1888")
        // await form.locator("//button[text()='Submit']").click()
        // await expect.soft(form.locator("//*[text()='Value must be greater than or equal to 1900.']")).toBeVisible()
        const randomYear = getRandomNumber(2018, 2025)
        await form.locator("input[name=highschoolGraduationYear]").fill(randomYear.toString())
        const location = await input.randomSelect("//select[@name='highSchoolLocation.0']", false)
        const randomSchool = "High School_" + getRandomCharacters(6)
        await form.locator("input[name=highSchoolName]").fill(randomSchool)
        const remove = form.locator("button.button:has-text('Remove')")
        const removeCount = await remove.count()
        for (let i = 0; i < removeCount; i++) {
            await remove.nth(0).click()
        }
        await form.locator("//label[contains(@class, 'input-label') and text()='What final year high school subjects do/did you take?']/following-sibling::*/button[text()='Add']").click()
        const randomSubject = "Math_" + getRandomCharacters(6)
        await form.locator("//input[@name='finalYearHighSchoolSubjects.0']").fill(randomSubject)
        await page.locator("//h3[text()='About Your High School']").click()
        await form.locator("//button[text()='Submit']").click()
        await page.waitForSelector("//li[@data-testid='message-item' and p/text()='Form was submitted successfully.']")
        const savedYear = await form.locator("//label[contains(@class, input-label) and text()='Expected/actual high school graduation year?']/following-sibling::div").innerText()
        const savedLocation = await form.locator("//label[contains(@class, input-label) and text()='Where do/did you go to high school?']/following-sibling::div//li[@class='list__item']").innerText()
        const savedSchool = await form.locator("//label[contains(@class, input-label) and text()='What is/was the name of your high school?']/following-sibling::div").innerText()
        const savedSubject = await form.locator("//label[contains(@class, input-label) and text()='What final year high school subjects do/did you take?']/following-sibling::div//li[@class='list__item']").innerText()
        expect.soft(savedYear).toEqual(randomYear.toString())
        expect.soft(savedLocation).toEqual(location)
        expect.soft(savedSchool).toEqual(randomSchool)
        expect(savedSubject).toEqual(randomSubject)
    })

    // tests to perform on "Undergraduate Study" section
    test("undergraduate study section", async ({ page }) => {
        const input = new Input(page)
        await page.locator("//h3[contains(@class, 'field-set__label') and text()='Personal Details']").waitFor()
        const undergrad = page.locator("//h3[contains(@class, 'field-set__label') and text()='Undergraduate Study']")
        const checkVisible = await undergrad.isVisible()
        test.skip(!checkVisible, "skip test when no undergraduate study section")
        await undergrad.locator("//following-sibling::button[@class='field-set__trigger']").click()
        await page.locator("span:has-text('Loading')").last().waitFor({ state: 'detached' })
        const form = undergrad.locator("//following-sibling::form")
        await expect.soft(form.locator("button.button:has-text('Submit')")).toBeVisible()
        const remove = form.locator("button.button:has-text('Remove')")
        const removeCount = await remove.count()
        for (let i = 0; i < removeCount; i++) {
            await remove.nth(0).click()
        }
        await form.locator("//label[contains(@class, 'input-label') and text()='What do you want to study at university?']/following-sibling::*/button[text()='Add']").click()
        const chosenStudyField = await input.randomSelect("//select[@name='ugStudyFieldInterests.0.0']", false)
        const label = "If your interests aren't listed, write them here."
        await form.locator(`//label[contains(@class, 'input-label') and text()="${label}"]/following-sibling::*/button[text()='Add']`).click()
        const random = getRandomCharacters(6)
        const chosenInterest = `Calligraphy_${random}`
        await form.locator("//input[@name='ugOtherStudyFieldInterests.0']").fill(chosenInterest)
        await form.locator("//label[contains(@class, 'input-label') and text()='What mode of study do you prefer?']/following-sibling::*/button[text()='Add']").click()
        const chosenStudyMode = await input.randomSelect("//select[@name='ugModeOfStudyPreference.0.0']", false)
        await form.locator("//label[contains(@class, 'input-label') and text()='Where do you want to go to university?']/following-sibling::*/button[text()='Add']").click()
        const chosenLocation = await input.randomSelect("//select[@name='ugStudyLocationPreference.0.0']", false)
        await form.locator("//button[text()='Submit']").click()
        await page.waitForSelector("//li[@data-testid='message-item' and p/text()='Form was submitted successfully.']")
        const studyField = await form.locator("//label[contains(@class, input-label) and text()='What do you want to study at university?']/following-sibling::div//li[@class='list__item']").innerText()
        const interest = await form.locator(`//label[contains(@class, input-label) and text()="${label}"]/following-sibling::div//li[@class='list__item']`).innerText()
        const studyMode = await form.locator("//label[contains(@class, input-label) and text()='What mode of study do you prefer?']/following-sibling::div//li[@class='list__item']").innerText()
        const location = await form.locator("//label[contains(@class, input-label) and text()='Where do you want to go to university?']/following-sibling::div//li[@class='list__item']").innerText()
        expect.soft(studyField).toEqual(chosenStudyField)
        expect.soft(interest).toEqual(chosenInterest)
        expect.soft(studyMode).toEqual(chosenStudyMode)
        expect(location).toEqual(chosenLocation)
    })

    // tests to perform on "Postgraduate Study" section
    test("postgraduate study section", async ({ page }) => {
        const input = new Input(page)
        await page.locator("//h3[contains(@class, 'field-set__label') and text()='Personal Details']").waitFor()
        const postgrad = page.locator("//h3[contains(@class, 'field-set__label') and text()='Postgraduate Study']")
        const checkVisible = await postgrad.isVisible()
        test.skip(!checkVisible, "skip test when no postgraduate study section")
        await postgrad.locator("//following-sibling::button[@class='field-set__trigger']").click()
        await page.locator("span:has-text('Loading')").last().waitFor({ state: 'detached' })
        const form = postgrad.locator("//following-sibling::div/form")
        await expect.soft(form.locator("button.button:has-text('Submit')")).toBeVisible()
        const remove = form.locator("button.button:has-text('Remove')")
        const removeCount = await remove.count()
        for (let i = 0; i < removeCount; i++) {
            await remove.nth(0).click()
        }
        await form.locator("//label[contains(@class, 'input-label') and text()='What postgraduate study field are you interested in?']/following-sibling::*/button[text()='Add']").click()
        const chosenStudyField = await input.randomSelect("//select[@name='pgStudyFieldInterests.0.0']", false)
        const label = "If your interests aren't listed, write them here."
        await form.locator(`//label[contains(@class, 'input-label') and text()="${label}"]/following-sibling::*/button[text()='Add']`).click()
        const random = getRandomCharacters(6)
        const chosenInterest = `Travel_${random}`
        await form.locator("//input[@name='pgOtherStudyFieldInterests.0']").fill(chosenInterest)
        await form.locator("//label[contains(@class, 'input-label') and text()='What mode of study do you prefer?']/following-sibling::*/button[text()='Add']").click()
        const chosenStudyMode = await input.randomSelect("//select[@name='pgModeOfStudyPreference.0.0']", false)
        await form.locator("//label[contains(@class, 'input-label') and text()='Where do you want to study?']/following-sibling::*/button[text()='Add']").click()
        const chosenLocation = await input.randomSelect("//select[@name='pgStudyLocationPreference.0.0']", false)
        await form.locator("//button[text()='Submit']").click()
        await page.waitForSelector("//li[@data-testid='message-item' and p/text()='Form was submitted successfully.']")
        const studyField = await form.locator("//label[contains(@class, input-label) and text()='What postgraduate study field are you interested in?']/following-sibling::div//li[@class='list__item']").innerText()
        const interest = await form.locator(`//label[contains(@class, input-label) and text()="${label}"]/following-sibling::div//li[@class='list__item']`).innerText()
        const studyMode = await form.locator("//label[contains(@class, input-label) and text()='What mode of study do you prefer?']/following-sibling::div//li[@class='list__item']").innerText()
        const location = await form.locator("//label[contains(@class, input-label) and text()='Where do you want to study?']/following-sibling::div//li[@class='list__item']").innerText()
        expect.soft(studyField).toEqual(chosenStudyField)
        expect.soft(interest).toEqual(chosenInterest)
        expect.soft(studyMode).toEqual(chosenStudyMode)
        expect(location).toEqual(chosenLocation)
    })
})